{"version":3,"file":"markdown-it-deflist.js","sources":["../node_modules/markdown-it-deflist/index.js"],"sourcesContent":["// Process definition lists\n//\n'use strict';\n\n\nmodule.exports = function deflist_plugin(md) {\n  var isSpace = md.utils.isSpace;\n\n  // Search `[:~][\\n ]`, returns next pos after marker on success\n  // or -1 on fail.\n  function skipMarker(state, line) {\n    var pos, marker,\n        start = state.bMarks[line] + state.tShift[line],\n        max = state.eMarks[line];\n\n    if (start >= max) { return -1; }\n\n    // Check bullet\n    marker = state.src.charCodeAt(start++);\n    if (marker !== 0x7E/* ~ */ && marker !== 0x3A/* : */) { return -1; }\n\n    pos = state.skipSpaces(start);\n\n    // require space after \":\"\n    if (start === pos) { return -1; }\n\n    // no empty definitions, e.g. \"  : \"\n    if (pos >= max) { return -1; }\n\n    return start;\n  }\n\n  function markTightParagraphs(state, idx) {\n    var i, l,\n        level = state.level + 2;\n\n    for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n      if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n        state.tokens[i + 2].hidden = true;\n        state.tokens[i].hidden = true;\n        i += 2;\n      }\n    }\n  }\n\n  function deflist(state, startLine, endLine, silent) {\n    var ch,\n        contentStart,\n        ddLine,\n        dtLine,\n        itemLines,\n        listLines,\n        listTokIdx,\n        max,\n        nextLine,\n        offset,\n        oldDDIndent,\n        oldIndent,\n        oldParentType,\n        oldSCount,\n        oldTShift,\n        oldTight,\n        pos,\n        prevEmptyEnd,\n        tight,\n        token;\n\n    if (silent) {\n      // quirk: validation mode validates a dd block only, not a whole deflist\n      if (state.ddIndent < 0) { return false; }\n      return skipMarker(state, startLine) >= 0;\n    }\n\n    nextLine = startLine + 1;\n    if (nextLine >= endLine) { return false; }\n\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      if (nextLine >= endLine) { return false; }\n    }\n\n    if (state.sCount[nextLine] < state.blkIndent) { return false; }\n    contentStart = skipMarker(state, nextLine);\n    if (contentStart < 0) { return false; }\n\n    // Start list\n    listTokIdx = state.tokens.length;\n    tight = true;\n\n    token     = state.push('dl_open', 'dl', 1);\n    token.map = listLines = [ startLine, 0 ];\n\n    //\n    // Iterate list items\n    //\n\n    dtLine = startLine;\n    ddLine = nextLine;\n\n    // One definition list can contain multiple DTs,\n    // and one DT can be followed by multiple DDs.\n    //\n    // Thus, there is two loops here, and label is\n    // needed to break out of the second one\n    //\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    for (;;) {\n      prevEmptyEnd = false;\n\n      token          = state.push('dt_open', 'dt', 1);\n      token.map      = [ dtLine, dtLine ];\n\n      token          = state.push('inline', '', 0);\n      token.map      = [ dtLine, dtLine ];\n      token.content  = state.getLines(dtLine, dtLine + 1, state.blkIndent, false).trim();\n      token.children = [];\n\n      token          = state.push('dt_close', 'dt', -1);\n\n      for (;;) {\n        token     = state.push('dd_open', 'dd', 1);\n        token.map = itemLines = [ nextLine, 0 ];\n\n        pos = contentStart;\n        max = state.eMarks[ddLine];\n        offset = state.sCount[ddLine] + contentStart - (state.bMarks[ddLine] + state.tShift[ddLine]);\n\n        while (pos < max) {\n          ch = state.src.charCodeAt(pos);\n\n          if (isSpace(ch)) {\n            if (ch === 0x09) {\n              offset += 4 - offset % 4;\n            } else {\n              offset++;\n            }\n          } else {\n            break;\n          }\n\n          pos++;\n        }\n\n        contentStart = pos;\n\n        oldTight = state.tight;\n        oldDDIndent = state.ddIndent;\n        oldIndent = state.blkIndent;\n        oldTShift = state.tShift[ddLine];\n        oldSCount = state.sCount[ddLine];\n        oldParentType = state.parentType;\n        state.blkIndent = state.ddIndent = state.sCount[ddLine] + 2;\n        state.tShift[ddLine] = contentStart - state.bMarks[ddLine];\n        state.sCount[ddLine] = offset;\n        state.tight = true;\n        state.parentType = 'deflist';\n\n        state.md.block.tokenize(state, ddLine, endLine, true);\n\n        // If any of list item is tight, mark list as tight\n        if (!state.tight || prevEmptyEnd) {\n          tight = false;\n        }\n        // Item become loose if finish with empty line,\n        // but we should filter last element, because it means list finish\n        prevEmptyEnd = (state.line - ddLine) > 1 && state.isEmpty(state.line - 1);\n\n        state.tShift[ddLine] = oldTShift;\n        state.sCount[ddLine] = oldSCount;\n        state.tight = oldTight;\n        state.parentType = oldParentType;\n        state.blkIndent = oldIndent;\n        state.ddIndent = oldDDIndent;\n\n        token = state.push('dd_close', 'dd', -1);\n\n        itemLines[1] = nextLine = state.line;\n\n        if (nextLine >= endLine) { break OUTER; }\n\n        if (state.sCount[nextLine] < state.blkIndent) { break OUTER; }\n        contentStart = skipMarker(state, nextLine);\n        if (contentStart < 0) { break; }\n\n        ddLine = nextLine;\n\n        // go to the next loop iteration:\n        // insert DD tag and repeat checking\n      }\n\n      if (nextLine >= endLine) { break; }\n      dtLine = nextLine;\n\n      if (state.isEmpty(dtLine)) { break; }\n      if (state.sCount[dtLine] < state.blkIndent) { break; }\n\n      ddLine = dtLine + 1;\n      if (ddLine >= endLine) { break; }\n      if (state.isEmpty(ddLine)) { ddLine++; }\n      if (ddLine >= endLine) { break; }\n\n      if (state.sCount[ddLine] < state.blkIndent) { break; }\n      contentStart = skipMarker(state, ddLine);\n      if (contentStart < 0) { break; }\n\n      // go to the next loop iteration:\n      // insert DT and DD tags and repeat checking\n    }\n\n    // Finilize list\n    token = state.push('dl_close', 'dl', -1);\n\n    listLines[1] = nextLine;\n\n    state.line = nextLine;\n\n    // mark paragraphs tight if needed\n    if (tight) {\n      markTightParagraphs(state, listTokIdx);\n    }\n\n    return true;\n  }\n\n\n  md.block.ruler.before('paragraph', 'deflist', deflist, { alt: [ 'paragraph', 'reference', 'blockquote' ] });\n};\n"],"names":[],"mappings":"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"}